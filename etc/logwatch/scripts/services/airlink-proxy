#!/usr/bin/perl

# Copyright (c) 2020 John A Kline
# See the file LICENSE for your full rights.


use strict;

my %counts;
my %errors;

# keys for individual counts
my $STARTUPS = 'Startups';
my $LONG_SENSOR_READS = 'Long Sensor Reads';
my $ARCHIVE_RECORDS_ADDED = 'Archive Records Added';
my $SKIPPED_SENSOR_READINGS = 'Skipped Sensor Readings';
my $INSANE_SENSOR_READINGS = 'Insane Sensor Readings';
my $ARCHIVE_INSERT_ERRORS = 'Archive Insert Errors';
my $CURRENT_INSERT_ERRORS = 'Current Insert Errors';
my $TMP_NAME_RESOLUTON_ERRORS = 'Tmp Name Resolution Errors';
my $NO_ROUTE_TO_HOST_ERRORS = 'No Route to Host';
my $SKIPPED_ARCHIVE_RECORDS = 'Skipped archive records';
my $CONNECTION_TIMEOUT = 'Connection timed out';
my $CONNECTION_REFUSED = 'Connection refused';
my $NAME_UNKNOWN = 'Name or service not known';

# any lines that do not match the patterns we define
my @unmatched = ();

# keep details
my @current_insert_errors = ();
my @archive_insert_errors = ();
my @insane_readings = ();

my %itemized = (
    'Archive Insert Errors', \@archive_insert_errors,
    'Current Insert Errors', \@current_insert_errors,
    'Insane Readings', \@insane_readings,
    );

my %summaries = (
    'counts', \%counts,
    'errors', \%errors,
    );

while(defined($_ = <STDIN>)) {
    chomp;
    if (/Version *:/) {
        $counts{$STARTUPS} += 1;
    } elsif (/Event took longer than expected/) {
        $errors{$LONG_SENSOR_READS} += 1;
    } elsif (/Added record/) {
        $counts{$ARCHIVE_RECORDS_ADDED} += 1;
    } elsif (/Could not save archive reading to database/) {
        push @archive_insert_errors, $_;
        $errors{$ARCHIVE_INSERT_ERRORS} += 1;
    } elsif (/Could not save current reading to database/) {
        push @current_insert_errors, $_;
        $errors{$CURRENT_INSERT_ERRORS} += 1;
    } elsif (/Skipping reading because of:/) {
        $errors{$SKIPPED_SENSOR_READINGS} += 1;
    } elsif (/Reading not sane:/) {
        push @insane_readings, $_;
        $errors{$INSANE_SENSOR_READINGS} += 1;
    } elsif (/Failed to establish a new connection: .* Temporary failure in name resolution/) {
        $errors{$TMP_NAME_RESOLUTON_ERRORS} += 1;
    } elsif (/Failed to establish a new connection: .* No route to host/) {
        $errors{$NO_ROUTE_TO_HOST_ERRORS} += 1;
    } elsif (/Skipping archive record/) {
        $errors{$SKIPPED_ARCHIVE_RECORDS} += 1;
    } elsif (/Connection refused.*Retrying request/) {
        $errors{$CONNECTION_REFUSED} += 1;
    } elsif (/Connection to .* timed out/) {
        $errors{$CONNECTION_TIMEOUT} += 1;
    } elsif (/Failed to establish a new connection: .* Name or service not known/) {
        $errors{$NAME_UNKNOWN} += 1;
    } elsif (/host:port *:/ ||
             /conf_file *:/ ||
             /server_port *:/ ||
             /db_file *:/ ||
             /timeout_secs *:/ ||
             /pollfreq_secs *:/ ||
             /pollfreq_offset *:/ ||
             /arcint_secs *:/ ||
             /outfile *:/ ||
             /arcfile *:/ ||
             /service_name *:/ ||
             /pidfile *:/ ||
             /log_to_stdout *:/ ||
             /Starting .* daemon:/ ||
             /Stopping .* daemon:/ ||
             /debug *:/) {
        # ignore
    } else {
        push @unmatched, $_;
    }
}

foreach my $slabel (sort keys %summaries) {
    my $s = $summaries{$slabel};
    if(scalar(keys %$s)) {
        print "$slabel:\n";
        foreach my $k (sort keys %$s) {
            next if $s->{$k} == 0;
            printf("  %-45s %6d\n", $k, $s->{$k});
        }
        print "\n";
    }
}

foreach my $k (sort keys %itemized) {
    report($k, $itemized{$k}) if scalar @{$itemized{$k}} > 0;
}

report("unmatched lines", \@unmatched) if $#unmatched >= 0;

exit 0;

sub report {
    my($label, $aref, $href) = @_;
    print "\n$label:\n";
    foreach my $x (@$aref) {
        my $str = $x;
        if ($href && $href->{$x} > 1) {
            $str .= " ($href->{$x} times)";
        }
        print "  $str\n";
    }
}
